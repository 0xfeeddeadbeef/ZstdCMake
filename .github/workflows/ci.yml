---
name: CI
on: workflow_dispatch

jobs:
  Build-in-Matrix:
    strategy:
      fail-fast: false
      matrix:
        os: [ 'windows-2022' ]
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }}
    steps:
      - name: Clone
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          show-progress: false
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v5
      - name: Set VCPKG_ROOT (Linux)
        if: ${{ success() && matrix.os == 'ubuntu-20.04' }}
        run: |
          echo "VCPKG_TARGET_ARCHITECTURE=x64" >> "$GITHUB_ENV"
          echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> "$GITHUB_ENV"
          echo "VCPKG_CRT_LINKAGE=static" >> "$GITHUB_ENV"
          echo "VCPKG_BUILD_TYPE=release" >> "$GITHUB_ENV"
          echo "VCPKG_LIBRARY_LINKAGE=dynamic" >> "$GITHUB_ENV"
          echo "VCPKG_CMAKE_SYSTEM_NAME=Linux" >> "$GITHUB_ENV"
      - name: Set VCPKG_ROOT (Windows)
        if: ${{ success() && matrix.os == 'windows-2022' }}
        run: |
          echo "VCPKG_TARGET_ARCHITECTURE=x64" >> "$($env:GITHUB_ENV)"
          echo "VCPKG_ROOT=$($env:VCPKG_INSTALLATION_ROOT)" >> "$($env:GITHUB_ENV)"
          echo "VCPKG_CRT_LINKAGE=static" >> "$($env:GITHUB_ENV)"
          echo "VCPKG_BUILD_TYPE=release" >> "$($env:GITHUB_ENV)"
          echo "VCPKG_LIBRARY_LINKAGE=dynamic" >> "$($env:GITHUB_ENV)"
          echo "VCPKG_CMAKE_SYSTEM_NAME=Windows" >> "$($env:GITHUB_ENV)"
      - name: CMake (Linux)
        if: ${{ success() && matrix.os == 'ubuntu-20.04' }}
        uses: threeal/cmake-action@v2
        with:
          generator: Ninja
          c-compiler: gcc
          cxx-compiler: g++
          args: |
            --preset=vcpkg
          options: |
            CMAKE_BUILD_TYPE=Release
            CMAKE_MAKE_PROGRAM=ninja
      - name: Run (Linux)
        if: ${{ success() && matrix.os == 'ubuntu-20.04' }}
        run: |
          ./build/ZstdCMake
      - name: 'Setup Visual C++'
        if: ${{ success() && matrix.os == 'windows-2022' }}
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64
      - name: CMake (Windows)
        if: ${{ success() && matrix.os == 'windows-2022' }}
        uses: threeal/cmake-action@v2
        with:
          generator: Ninja
          c-compiler: cl
          cxx-compiler: cl
          args: |
            --preset=vcpkg
          options: |
            CMAKE_BUILD_TYPE=Release
            CMAKE_MAKE_PROGRAM=ninja
      - name: Run (Windows)
        if: ${{ success() && matrix.os == 'windows-2022' }}
        run: |
          ./build/ZstdCMake.exe
      - name: Upload (Ubuntu)
        if: ${{ success() && matrix.os == 'ubuntu-20.04' }}
        uses: actions/upload-artifact@v4
        with:
          name: built-libs-ubuntu
          path: 'build/**/*.so*'
      - name: Upload (Windows)
        if: ${{ success() && matrix.os == 'windows-2022' }}
        uses: actions/upload-artifact@v4
        with:
          name: built-libs-windows
          path: 'build/**/*.dll'
